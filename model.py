# -*- coding: utf-8 -*-
"""PCOS_prediction(project_1)_trial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uSWWLFLfJDYzGKemLFIC7mqpUpjB6WV8

**B.Tech. BCSE497J - Project-I**

**TITLE:ML-DRIVEN PERSONALIZED PCOS PREDICTION WITH USER-FRIENDLY INTERFACE AND LIFESTYLE GUIDANCE**

*TEAM MEMBERS: SUDARSANAA C R,A JEBA PEARLLIN, ADHAV VAISHNAVI ANKUSH *
"""
import pandas as pd
import numpy as np
import pickle
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import mutual_info_classif, SelectKBest
from sklearn.metrics import classification_report, confusion_matrix

# Load the data
df = pd.read_csv('full.csv')
print("Data shape:", df.shape)

# Split the data into features (X) and target variable (y)
X = df.drop(columns=['PCOS'])
y = df['PCOS']

# Convert to numpy arrays
X = np.array(X)
y = np.array(y)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=45)
print("Training set shape:", X_train.shape)
print("Testing set shape:", X_test.shape)

# Calculate mutual information and select the top K features
k = 10  # Adjust this number to select top k features
selector = SelectKBest(mutual_info_classif, k=k)
X_train_selected = selector.fit_transform(X_train, y_train)
X_test_selected = selector.transform(X_test)

# Display selected features
selected_features = selector.get_support(indices=True)
print(f"Top {k} selected features based on mutual information: {selected_features}")

# Define the Random Forest model
rf = RandomForestClassifier(random_state=45)

# Set up GridSearchCV to tune hyperparameters
param_grid = {
    'n_estimators': [100, 200, 300],  # Number of trees
    'max_depth': [None, 10, 20, 30],  # Depth of the trees
    'min_samples_split': [2, 5, 10],  # Minimum samples required to split an internal node
    'min_samples_leaf': [1, 2, 4],  # Minimum samples required to be at a leaf node
    'bootstrap': [True, False]  # Whether to use bootstrap samples
}

grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=5, n_jobs=-1, verbose=2)
grid_search.fit(X_train_selected, y_train)

# Print the best hyperparameters
print("Best hyperparameters found: ", grid_search.best_params_)

# Use the best model found by GridSearchCV
best_rf = grid_search.best_estimator_

# Save the trained model as a pickle file
pickle.dump(best_rf, open('model.pkl', 'wb'))

# Load the model back from pickle
loaded_model = pickle.load(open('model.pkl', 'rb'))

# Make predictions on the training and testing sets
predict_train = loaded_model.predict(X_train_selected)
predict_test = loaded_model.predict(X_test_selected)

# Evaluate the model on the training and testing sets
print("Confusion Matrix:")
print(confusion_matrix(y_train, predict_train))
print("\nClassification Report:")
print(classification_report(y_train, predict_train))







